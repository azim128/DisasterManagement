generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  VOLUNTEER
}

enum UserStatus {
  ACTIVE
  PENDING
  DISABLED
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  ON_TASK
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CrisisStatus {
  PENDING
  APPROVED
  REJECTED
  ASSIGNED
  RESOLVED
}

model User {
  user_id           Int       @id @default(autoincrement())
  name              String
  password          String
  email             String    @unique
  phone_number      String
  role              UserRole  @default(VOLUNTEER)
  status            UserStatus @default(PENDING)
  assigned_tasks    Task[]    
  purchases   Purchase[]
  approved_crises   CrisisEntry[] @relation("ApprovedBy")
  assigned_crises   CrisisEntry[] @relation("AssignedTo")

  volunteer         Volunteer?
  admin             Admin?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Volunteer {
  volunteer_id      Int                @id @default(autoincrement())
  user              User               @relation(fields: [user_id], references: [user_id])
  user_id           Int                @unique
  age               Int?
  assigned_location String?
  skills            String?
  availability_status AvailabilityStatus?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  admin_id  Int    @id @default(autoincrement())
  user      User   @relation(fields: [user_id], references: [user_id])
  user_id   Int    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  task_id  Int    @id @default(autoincrement())
  title    String
  details  String
  user     User?  @relation(fields: [user_id], references: [user_id])
  user_id  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donation {
  donation_id  Int    @id @default(autoincrement())
  amount       Float
  donar_name   String? @default("Anonymous")
  donar_email  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CrisisEntry {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  severity    Severity
  requiredHelp String
  imageUrl    String?
  location    String
  status      CrisisStatus @default(PENDING)
  
  approvedBy  User?    @relation("ApprovedBy", fields: [approvedById], references: [user_id])
  approvedById Int?
  
  assignedTo  User?    @relation("AssignedTo", fields: [assignedToId], references: [user_id])
  assignedToId Int?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model InventoryItem {
  id          Int       @id @default(autoincrement())
  name        String   @unique
  quantity    Int
  category    String
  price       Float
  description String?
  purchases   Purchase[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Purchase {
  id          Int       @id @default(autoincrement())
  item        InventoryItem @relation(fields: [itemId], references: [id])
  itemId      Int
  quantity    Int
  user        User?     @relation(fields: [userId], references: [user_id])
  userId      Int?
  createdAt   DateTime  @default(now())
}